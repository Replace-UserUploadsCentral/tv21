/* Basic styles for the Financial Advisor chatbot template */

/* Ensure body and html are full height for proper layout */
html, body {
    height: 100%;
    margin: 0;
    font-family: Arial, sans-serif;
    background-color: #f0f2f5;
}

.main-container {
    height: 100vh;
}

/* Chat messages area */
.chat-messages {
    flex-grow: 1;
    overflow-y: auto;
    padding: 10px;
    background-color: #fdfefe;
    border-radius: 8px;
    margin-bottom: 20px;
}

/* Individual message styles */
.message {
    display: flex;
    align-items: flex-start;
    margin-bottom: 15px;
    max-width: 100%;
}

.message-avatar {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 1rem;
    margin-right: 10px;
    flex-shrink: 0;
}

.user-message .message-avatar {
    background-color: #3498db; /* Blue */
    order: 2; /* Move avatar to the right for user messages */
    margin-right: 0;
    margin-left: 10px;
}

.ai-message .message-avatar {
    background-color: #2ecc71; /* Green */
}

.message-bubble {
    padding: 10px 15px;
    border-radius: 15px;
    max-width: calc(100% - 60px); /* Account for avatar width and margin */
    word-wrap: break-word;
}

.user-message .message-bubble {
    background-color: #3498db; /* Blue */
    color: white;
    margin-left: auto; /* Push to right */
    border-bottom-right-radius: 2px;
}

.ai-message .message-bubble {
    background-color: #e0e0e0; /* Light grey */
    color: #333;
    border-bottom-left-radius: 2px;
}

.message-time {
    font-size: 0.75rem;
    color: #999;
    margin-top: 5px;
    width: 100%;
}

.user-message .message-time {
    text-align: right;
}

/* Chat input container */
.chat-input-container {
    background-color: #f8f9fa; /* Light grey */
    padding: 15px;
    border-top: 1px solid #e0e0e0;
    border-radius: 8px;
}

.chat-input-container .input-group {
    display: flex;
    margin-bottom: 10px;
}

.chat-input-container textarea {
    flex-grow: 1;
    border-radius: 20px;
    padding: 10px 15px;
    border: 1px solid #ddd;
    resize: none;
    overflow: hidden;
    min-height: 40px;
    max-height: 120px;
}

.chat-input-container .send-btn {
    background-color: #3498db; /* Blue */
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 10px;
    flex-shrink: 0;
}

.input-features {
    text-align: center;
    color: #7f8c8d;
}

.input-features span {
    margin: 0 10px;
    cursor: pointer;
} 